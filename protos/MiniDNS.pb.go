// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: protos/MiniDNS.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DNSList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list of name-ip, such as map["google.com"] = 10.10.10.10
	List map[string]string `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DNSList) Reset() {
	*x = DNSList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_MiniDNS_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSList) ProtoMessage() {}

func (x *DNSList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_MiniDNS_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSList.ProtoReflect.Descriptor instead.
func (*DNSList) Descriptor() ([]byte, []int) {
	return file_protos_MiniDNS_proto_rawDescGZIP(), []int{0}
}

func (x *DNSList) GetList() map[string]string {
	if x != nil {
		return x.List
	}
	return nil
}

type STR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *STR) Reset() {
	*x = STR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_MiniDNS_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STR) ProtoMessage() {}

func (x *STR) ProtoReflect() protoreflect.Message {
	mi := &file_protos_MiniDNS_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STR.ProtoReflect.Descriptor instead.
func (*STR) Descriptor() ([]byte, []int) {
	return file_protos_MiniDNS_proto_rawDescGZIP(), []int{1}
}

func (x *STR) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IP   string `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_MiniDNS_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_protos_MiniDNS_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_protos_MiniDNS_proto_rawDescGZIP(), []int{2}
}

func (x *Pair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pair) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type STRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents []string `protobuf:"bytes,1,rep,name=Contents,proto3" json:"Contents,omitempty"`
}

func (x *STRs) Reset() {
	*x = STRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_MiniDNS_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STRs) ProtoMessage() {}

func (x *STRs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_MiniDNS_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STRs.ProtoReflect.Descriptor instead.
func (*STRs) Descriptor() ([]byte, []int) {
	return file_protos_MiniDNS_proto_rawDescGZIP(), []int{3}
}

func (x *STRs) GetContents() []string {
	if x != nil {
		return x.Contents
	}
	return nil
}

type Pairs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SRC *Pair `protobuf:"bytes,1,opt,name=SRC,proto3" json:"SRC,omitempty"`
	DST *Pair `protobuf:"bytes,2,opt,name=DST,proto3" json:"DST,omitempty"`
}

func (x *Pairs) Reset() {
	*x = Pairs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_MiniDNS_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pairs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pairs) ProtoMessage() {}

func (x *Pairs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_MiniDNS_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pairs.ProtoReflect.Descriptor instead.
func (*Pairs) Descriptor() ([]byte, []int) {
	return file_protos_MiniDNS_proto_rawDescGZIP(), []int{4}
}

func (x *Pairs) GetSRC() *Pair {
	if x != nil {
		return x.SRC
	}
	return nil
}

func (x *Pairs) GetDST() *Pair {
	if x != nil {
		return x.DST
	}
	return nil
}

var File_protos_MiniDNS_proto protoreflect.FileDescriptor

var file_protos_MiniDNS_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x4d, 0x69, 0x6e, 0x69, 0x44, 0x4e, 0x53,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x71,
	0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x44, 0x4e, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x1f, 0x0a, 0x03, 0x53, 0x54, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0x22,
	0x0a, 0x04, 0x53, 0x54, 0x52, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x47, 0x0a, 0x05, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x53,
	0x52, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x03, 0x53, 0x52, 0x43, 0x12, 0x1e, 0x0a, 0x03, 0x44,
	0x53, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x03, 0x44, 0x53, 0x54, 0x32, 0xa7, 0x01, 0x0a, 0x03,
	0x44, 0x4e, 0x53, 0x12, 0x24, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x49, 0x50, 0x12, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x54, 0x52, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x54, 0x52, 0x73, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x06, 0x41, 0x64, 0x64,
	0x44, 0x4e, 0x53, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x54, 0x52, 0x22, 0x00,
	0x12, 0x28, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x12, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x54, 0x52, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x44, 0x4e, 0x53, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x73, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x54, 0x52, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_MiniDNS_proto_rawDescOnce sync.Once
	file_protos_MiniDNS_proto_rawDescData = file_protos_MiniDNS_proto_rawDesc
)

func file_protos_MiniDNS_proto_rawDescGZIP() []byte {
	file_protos_MiniDNS_proto_rawDescOnce.Do(func() {
		file_protos_MiniDNS_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_MiniDNS_proto_rawDescData)
	})
	return file_protos_MiniDNS_proto_rawDescData
}

var file_protos_MiniDNS_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protos_MiniDNS_proto_goTypes = []interface{}{
	(*DNSList)(nil), // 0: protos.DNSList
	(*STR)(nil),     // 1: protos.STR
	(*Pair)(nil),    // 2: protos.Pair
	(*STRs)(nil),    // 3: protos.STRs
	(*Pairs)(nil),   // 4: protos.Pairs
	nil,             // 5: protos.DNSList.ListEntry
}
var file_protos_MiniDNS_proto_depIdxs = []int32{
	5, // 0: protos.DNSList.List:type_name -> protos.DNSList.ListEntry
	2, // 1: protos.Pairs.SRC:type_name -> protos.Pair
	2, // 2: protos.Pairs.DST:type_name -> protos.Pair
	1, // 3: protos.DNS.GetIP:input_type -> protos.STR
	2, // 4: protos.DNS.AddDNS:input_type -> protos.Pair
	2, // 5: protos.DNS.DeleteDNS:input_type -> protos.Pair
	4, // 6: protos.DNS.ModifyDNS:input_type -> protos.Pairs
	3, // 7: protos.DNS.GetIP:output_type -> protos.STRs
	1, // 8: protos.DNS.AddDNS:output_type -> protos.STR
	1, // 9: protos.DNS.DeleteDNS:output_type -> protos.STR
	1, // 10: protos.DNS.ModifyDNS:output_type -> protos.STR
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_protos_MiniDNS_proto_init() }
func file_protos_MiniDNS_proto_init() {
	if File_protos_MiniDNS_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_MiniDNS_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_MiniDNS_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_MiniDNS_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_MiniDNS_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_MiniDNS_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pairs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_MiniDNS_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_MiniDNS_proto_goTypes,
		DependencyIndexes: file_protos_MiniDNS_proto_depIdxs,
		MessageInfos:      file_protos_MiniDNS_proto_msgTypes,
	}.Build()
	File_protos_MiniDNS_proto = out.File
	file_protos_MiniDNS_proto_rawDesc = nil
	file_protos_MiniDNS_proto_goTypes = nil
	file_protos_MiniDNS_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DNSClient is the client API for DNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DNSClient interface {
	//Search by Name.
	//Return the IP.
	GetIP(ctx context.Context, in *STR, opts ...grpc.CallOption) (*STRs, error)
	//Add a pair of name-ip reflection into the list
	//Return an error message or nil
	AddDNS(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*STR, error)
	//Delete a pair of name-ip reflection by name
	//Return an error message or nil
	DeleteDNS(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*STR, error)
	//Modify a name to a new ip
	//Return an error message or nil
	ModifyDNS(ctx context.Context, in *Pairs, opts ...grpc.CallOption) (*STR, error)
}

type dNSClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSClient(cc grpc.ClientConnInterface) DNSClient {
	return &dNSClient{cc}
}

func (c *dNSClient) GetIP(ctx context.Context, in *STR, opts ...grpc.CallOption) (*STRs, error) {
	out := new(STRs)
	err := c.cc.Invoke(ctx, "/protos.DNS/GetIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) AddDNS(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*STR, error) {
	out := new(STR)
	err := c.cc.Invoke(ctx, "/protos.DNS/AddDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) DeleteDNS(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*STR, error) {
	out := new(STR)
	err := c.cc.Invoke(ctx, "/protos.DNS/DeleteDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) ModifyDNS(ctx context.Context, in *Pairs, opts ...grpc.CallOption) (*STR, error) {
	out := new(STR)
	err := c.cc.Invoke(ctx, "/protos.DNS/ModifyDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSServer is the server API for DNS service.
type DNSServer interface {
	//Search by Name.
	//Return the IP.
	GetIP(context.Context, *STR) (*STRs, error)
	//Add a pair of name-ip reflection into the list
	//Return an error message or nil
	AddDNS(context.Context, *Pair) (*STR, error)
	//Delete a pair of name-ip reflection by name
	//Return an error message or nil
	DeleteDNS(context.Context, *Pair) (*STR, error)
	//Modify a name to a new ip
	//Return an error message or nil
	ModifyDNS(context.Context, *Pairs) (*STR, error)
}

// UnimplementedDNSServer can be embedded to have forward compatible implementations.
type UnimplementedDNSServer struct {
}

func (*UnimplementedDNSServer) GetIP(context.Context, *STR) (*STRs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP not implemented")
}
func (*UnimplementedDNSServer) AddDNS(context.Context, *Pair) (*STR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDNS not implemented")
}
func (*UnimplementedDNSServer) DeleteDNS(context.Context, *Pair) (*STR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDNS not implemented")
}
func (*UnimplementedDNSServer) ModifyDNS(context.Context, *Pairs) (*STR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyDNS not implemented")
}

func RegisterDNSServer(s *grpc.Server, srv DNSServer) {
	s.RegisterService(&_DNS_serviceDesc, srv)
}

func _DNS_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DNS/GetIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).GetIP(ctx, req.(*STR))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_AddDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).AddDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DNS/AddDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).AddDNS(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_DeleteDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).DeleteDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DNS/DeleteDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).DeleteDNS(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_ModifyDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pairs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).ModifyDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DNS/ModifyDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).ModifyDNS(ctx, req.(*Pairs))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DNS",
	HandlerType: (*DNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIP",
			Handler:    _DNS_GetIP_Handler,
		},
		{
			MethodName: "AddDNS",
			Handler:    _DNS_AddDNS_Handler,
		},
		{
			MethodName: "DeleteDNS",
			Handler:    _DNS_DeleteDNS_Handler,
		},
		{
			MethodName: "ModifyDNS",
			Handler:    _DNS_ModifyDNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/MiniDNS.proto",
}
